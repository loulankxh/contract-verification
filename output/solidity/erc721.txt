Error while running compiler, details:
Warning: This is a pre-release compiler version, please do not use it in production.

Warning: Source file does not specify required compiler version!
--> /contracts/erc721.sol

Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it "abstract" is sufficient.
  --> /contracts/@openzeppelin/contracts/introspection/ERC165.sol:24:5:
   |
24 |     constructor () internal {
   |     ^ (Relevant source part starts here and spans across multiple lines).

Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it "abstract" is sufficient.
  --> /contracts/@openzeppelin/contracts/token/ERC721/ERC721.sol:93:5:
   |
93 |     constructor (string memory name_, string memory symbol_) public {
   |     ^ (Relevant source part starts here and spans across multiple lines).


======= Converting to Boogie IVL =======

======= /contracts/@openzeppelin/contracts/introspection/ERC165.sol =======

======= /contracts/@openzeppelin/contracts/introspection/IERC165.sol =======

======= /contracts/@openzeppelin/contracts/math/SafeMath.sol =======

======= /contracts/@openzeppelin/contracts/token/ERC721/ERC721.sol =======
/contracts/@openzeppelin/contracts/token/ERC721/ERC721.sol:147:27: solc-verify error: Member without corresponding declaration: encodePacked
            return string(abi.encodePacked(base, _tokenURI));
                          ^--------------^
/contracts/@openzeppelin/contracts/token/ERC721/ERC721.sol:147:27: solc-verify error: Only identifiers are supported as function calls
            return string(abi.encodePacked(base, _tokenURI));
                          ^-------------------------------^
/contracts/@openzeppelin/contracts/token/ERC721/ERC721.sol:150:23: solc-verify error: Member without corresponding declaration: encodePacked
        return string(abi.encodePacked(base, tokenId.toString()));
                      ^--------------^
/contracts/@openzeppelin/contracts/token/ERC721/ERC721.sol:150:23: solc-verify error: Only identifiers are supported as function calls
        return string(abi.encodePacked(base, tokenId.toString()));
                      ^----------------------------------------^
/contracts/@openzeppelin/contracts/token/ERC721/ERC721.sol:365:13: solc-verify error: Unsupported type conversion
        if (bytes(_tokenURIs[tokenId]).length != 0) {
            ^------------------------^
/contracts/@openzeppelin/contracts/token/ERC721/ERC721.sol:441:51: solc-verify error: Member without corresponding declaration: encodeWithSelector
        bytes memory returndata = to.functionCall(abi.encodeWithSelector(
                                                  ^--------------------^
/contracts/@openzeppelin/contracts/token/ERC721/ERC721.sol:442:13: solc-verify error: Member without corresponding declaration: selector
            IERC721Receiver(to).onERC721Received.selector,
            ^-------------------------------------------^
/contracts/@openzeppelin/contracts/token/ERC721/ERC721.sol:441:51: solc-verify error: Only identifiers are supported as function calls
        bytes memory returndata = to.functionCall(abi.encodeWithSelector(
                                                  ^ (Relevant source part starts here and spans across multiple lines).
/contracts/@openzeppelin/contracts/token/ERC721/ERC721.sol:448:25: solc-verify error: Member without corresponding declaration: decode
        bytes4 retval = abi.decode(returndata, (bytes4));
                        ^--------^
/contracts/@openzeppelin/contracts/token/ERC721/ERC721.sol:448:49: solc-verify error: Unhandled node: ElementaryTypeNameExpression
        bytes4 retval = abi.decode(returndata, (bytes4));
                                                ^----^
/contracts/@openzeppelin/contracts/token/ERC721/ERC721.sol:448:25: solc-verify error: Only identifiers are supported as function calls
        bytes4 retval = abi.decode(returndata, (bytes4));
                        ^------------------------------^

======= /contracts/@openzeppelin/contracts/token/ERC721/IERC721.sol =======

======= /contracts/@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol =======

======= /contracts/@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol =======

======= /contracts/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol =======

======= /contracts/@openzeppelin/contracts/utils/Address.sol =======
/contracts/@openzeppelin/contracts/utils/Address.sol:33:9: solc-verify error: Inline assembly is not supported
        assembly { size := extcodesize(account) }
        ^---------------------------------------^
/contracts/@openzeppelin/contracts/utils/Address.sol:143:51: solc-verify error: Member without corresponding declaration: staticcall
        (bool success, bytes memory returndata) = target.staticcall(data);
                                                  ^---------------^
/contracts/@openzeppelin/contracts/utils/Address.sol:143:51: solc-verify error: Only identifiers are supported as function calls
        (bool success, bytes memory returndata) = target.staticcall(data);
                                                  ^---------------------^
/contracts/@openzeppelin/contracts/utils/Address.sol:143:51: solc-verify error: Initialization of tuples with non-tuples is not supported.
        (bool success, bytes memory returndata) = target.staticcall(data);
                                                  ^---------------------^
/contracts/@openzeppelin/contracts/utils/Address.sol:167:51: solc-verify error: Member without corresponding declaration: delegatecall
        (bool success, bytes memory returndata) = target.delegatecall(data);
                                                  ^-----------------^
/contracts/@openzeppelin/contracts/utils/Address.sol:167:51: solc-verify error: Only identifiers are supported as function calls
        (bool success, bytes memory returndata) = target.delegatecall(data);
                                                  ^-----------------------^
/contracts/@openzeppelin/contracts/utils/Address.sol:167:51: solc-verify error: Initialization of tuples with non-tuples is not supported.
        (bool success, bytes memory returndata) = target.delegatecall(data);
                                                  ^-----------------------^
/contracts/@openzeppelin/contracts/utils/Address.sol:180:17: solc-verify error: Inline assembly is not supported
                assembly {
                ^ (Relevant source part starts here and spans across multiple lines).

======= /contracts/@openzeppelin/contracts/utils/Context.sol =======
/contracts/@openzeppelin/contracts/utils/Context.sol:22:16: solc-verify error: Member without corresponding declaration: data
        return msg.data;
               ^------^

======= /contracts/@openzeppelin/contracts/utils/EnumerableMap.sol =======
/contracts/@openzeppelin/contracts/utils/EnumerableMap.sol:195:63: solc-verify error: Unsupported type conversion
        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));
                                                              ^------------^

======= /contracts/@openzeppelin/contracts/utils/EnumerableSet.sol =======
solc-verify internal exception: Empty pointer from subexpression
Details:
/solidity/libsolidity/boogie/StoragePtrHelper.cpp(147): Throw in function static void solidity::frontend::StoragePtrHelper::packInternal(const solidity::frontend::Expression*, boogie::Expr::Ref, solidity::frontend::BoogieContext&, solidity::frontend::StoragePtrHelper::PackResult&)
Dynamic exception type: boost::wrapexcept<solidity::langutil::InternalCompilerError>
std::exception::what: Empty pointer from subexpression
[solidity::util::tag_comment*] = Empty pointer from subexpression


real	0m2.898s
user	0m0.062s
sys	0m0.025s
